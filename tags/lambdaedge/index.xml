<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lambda@edge on Yann Hamon</title><link>https://yann.mandragor.org/tags/lambdaedge/</link><description>Recent content in Lambda@edge on Yann Hamon</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 02 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yann.mandragor.org/tags/lambdaedge/index.xml" rel="self" type="application/rss+xml"/><item><title>The execution model of AWS Lambda@edge with Cloudfront's two- and three-tiered architecture</title><link>https://yann.mandragor.org/posts/lambda-execution-model/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate><guid>https://yann.mandragor.org/posts/lambda-execution-model/</guid><description>The introduction of Lambda@Edge in 2016/2017 was probably one of the most significant updates to AWS Cloudfront in the last decade. By enabling customers to run code directly in Cloudfront&amp;rsquo;s Point-Of-Presences (POPs), AWS was at the forefront of edge computing, leveraging countless use-cases, from simple header manipulation, to custom authentication workflows.
Lambda@Edge relies on a simple execution model that defines four different places to manipulate CloudFront requests or response objects:</description></item></channel></rss>